/*
  __  __ _      _ _                 _      _           
 |  \/  (_)    (_| )               (_)    (_)          
 | \  / |_ _ __ _|/ ___   _ __ ___  ___  ___ _ __  ___ 
 | |\/| | | '__| | / __| | '_ ` _ \| \ \/ / | '_ \/ __|
 | |  | | | |  | | \__ \ | | | | | | |>  <| | | | \__ \
 |_|  |_|_|_|  |_| |___/ |_| |_| |_|_/_/\_\_|_| |_|___/
                                                       
*/

//  !*!~!*!~!*!~!*!~!*!~!*!~!*!~!*!~!*!~!*!~!*!~!*!~
// ~ My custom SCSS mixins, variables, & functions. *
//  !*!~!*!~!*!~!*!~!*!~!*!~!*!~!*!~!*!~!*!~!*!~!*!~
//	  
//	~~~MIXINS~~~
/*

REM with Pixel Fallback
Vertically center in an unknown context
Skew / Rotate 
Retina images

*/

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
// REM with Pixel Fallback //
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
// from scut
// call @include rem(#);
	// project-specific base value
		$scut-rem-base: 10 !default;
	//dependencies
		@function scut-strip-unit ($num){@return $num / ($num * 0 + 1);}
		@function scut-rem ($pixels){$rem-vals: (); @each $val in $pixels {
			$val-in-rems: scut-strip-unit($val) / $scut-rem-base * 1rem;
		    $rem-vals: append($rem-vals, $val-in-rems);}
		    @if length($rem-vals) == 1 {@return nth($rem-vals, 1);}
		    @else {@return $rem-vals;}}
	// the important one!
		@mixin rem (
		  $pixels,
		  $property: font-size
		) {
		  $px-vals: null;
		  @each $val in $pixels {
		    $val-in-px: scut-strip-unit($val) * 1px;
		    $px-vals: append($px-vals, $val-in-px);
		  }
		  $rem-vals: scut-rem($pixels);
		  #{$property}: $px-vals;
		  #{$property}: $rem-vals;
		}
///

@mixin max-screen($res)
{
  @media screen and (max-width: $res)
  {
    @content;
  }
}

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
// VERTICALLY CENTER AN ELEMENT //
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
/* adapted from http://css-tricks.com/centering-in-the-unknown/

	@extend .center-outer on the container div
	@extend .center-inner on the div w/ centered content 

*/
.center-parent {
	.text-align: center;
	&:before {
		content: '';
  		display: inline-block;
  		height: 100%;
  		vertical-align: middle;
	}
}
.center-inner {
	display: inline-block;
  	vertical-align: middle;
}

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
//              SHAPES          //
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
	@mixin skew($amount:20deg) {
		-webkit-transform: skew($amount);
		-moz-transform: skew($amount);
		-o-transform: skew($amount);
		transform: skew($amount);
	}
	@mixin rotate($amount:45deg){
		-webkit-transform: rotate($amount);
		-moz-transform: rotate($amount);
		-ms-transform: rotate($amount);
		-o-transform: rotate($amount);
		transform: rotate($amount);
		//-webkit-transform-origin: 0 100%;
		//-moz-transform-origin: 0 100%;
		//-ms-transform-origin: 0 100%;
		//-o-transform-origin: 0 100%;
		//transform-origin: 0 100%;
	}

// ~~~~~~~~~~~~~~~~~~~~ //
// RETINA IMAGES mixin //
// ~~~~~~~~~~~~~~~~~~~//
	// Use with care - http://37signals.com/svn/posts/3271-easy-retina-ready-images-using-scss

	@mixin image-2x($image, $width, $height) {
	  @media (min--moz-device-pixel-ratio: 1.3),
	         (-o-min-device-pixel-ratio: 2.6/2),
	         (-webkit-min-device-pixel-ratio: 1.3),
	         (min-device-pixel-ratio: 1.3),
	         (min-resolution: 1.3dppx) {
	    /* on retina, use image that's scaled by 2 */
	    background-image: url($image);
	    background-size: $width $height;
	  }
	}